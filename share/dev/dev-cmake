#!/usr/bin/env bash
# NOTE:
# Use /usr/bin/env to find shell interpreter for better portability.
# Reference: https://en.wikipedia.org/wiki/Shebang_%28Unix%29#Portability

# NOTE:
# Exit immediately if any commands (even in pipeline)
# exits with a non-zero status.
set -e
set -o pipefail

# WARNING:
# This is not reliable when using POSIX sh
# and current script file is sourced by `source` or `.`
CURRENT_SOURCE_FILE_PATH="${BASH_SOURCE[0]:-$0}"
CURRENT_SOURCE_FILE_NAME="$(basename -- "$CURRENT_SOURCE_FILE_PATH")"

# shellcheck disable=SC2016
USAGE="$CURRENT_SOURCE_FILE_NAME"'

Setup cmake project development environment.

'"
Usage:
  $CURRENT_SOURCE_FILE_NAME -h
  $CURRENT_SOURCE_FILE_NAME

Options:
  -h	Show this screen."

CURRENT_SOURCE_FILE_DIR="$(dirname -- "$CURRENT_SOURCE_FILE_PATH")"
CURRENT_SOURCE_FILE_DATADIR="$CURRENT_SOURCE_FILE_DIR"/..

. "$CURRENT_SOURCE_FILE_DATADIR"/dev/dev-utils

function main() {
	while getopts ':h' option; do
		case "$option" in
		h)
			echo "$USAGE"
			exit
			;;
		\?)
			log "[ERROR] Unknown option: -%s" "$OPTARG"
			exit 1
			;;
		esac
	done
	shift $((OPTIND - 1))

	if [ ! -f "$PWD"/CMakeUserPresets.json ]; then
		ln -s \
			"$CURRENT_SOURCE_FILE_DATADIR"/dev/CMakeUserPresets.json \
			"$PWD"/CMakeUserPresets.json
	fi

	local dev
	dev="dev"

	local LLVM=${LLVM:-1}

	if [ "$LLVM" != 0 ] && command -v "clang" &>/dev/null; then
		export CMAKE_C_COMPILER="clang"

		if command -v "clang-tidy" &>/dev/null; then
			export CMAKE_C_CLANG_TIDY="clang-tidy"
		fi
	fi

	if [ "$LLVM" != 0 ] && command -v "clang++" &>/dev/null; then
		export CMAKE_CXX_COMPILER="clang++"

		if command -v "clang-tidy" &>/dev/null; then
			export CMAKE_CXX_CLANG_TIDY="clang-tidy"
		fi
	fi

	if [ "$LLVM" != 0 ] && command -v "lld" &>/dev/null; then
		export CMAKE_LINKER_TYPE="lld"
		if cmake --version | grep -v -q '^cmake version 3\.29'; then
			export CFLAGS="$CFLAGS -fuse-ld=lld"
			export CXXFLAGS="$CXXFLAGS -fuse-ld=lld"
		fi
	fi

	if command -v "ccache" &>/dev/null; then
		export CMAKE_CXX_LAUNCHER="ccache"
	fi

	if command -v "ninja" &>/dev/null; then
		export CMAKE_GENERATOR="Ninja Multi-Config"
	fi

	execute_with_echo cmake --workflow --preset="$dev" --fresh

	ln -s build/compile_commands.json compile_commands.json
}

main "$@"
